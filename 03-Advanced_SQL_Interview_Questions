Advanced SQL Interview Questions
Welcome to the Advanced SQL Interview Questions section!
This category is designed for experienced SQL professionals who are comfortable working with large datasets, complex queries, and database optimization techniques.
Here, you'll find questions covering advanced concepts such as window functions, CTEs, recursive queries, query optimization, stored procedures, and database design. 
Mastering these topics will help you excel in technical interviews for senior data roles, database administration, and software engineering positions.
Author: Kirolos Girgis

1) What are window functions in SQL? with some Examples

ANSWER:
Window functions in SQL perform calculations across a set of table rowws that are related to the current row, without collapsing the result set into a single row like aggregate functions do. Window functions are used with the OVER() clause. For example, the RANK() function assigns a rank to each row. Also the SUM(), AVG() and COUNT() can be used as window functions

2) What is the difference between UNION and INTERSECT in SQL?

ANSWER:
UNION is used to combine the result sets of two queries and removes duplicated rows while INTERSECT returns only the rows thar are common between the two queries. it gives the intersection of two datasets

3) What is the difference between JOIN and SELF JOIN?

ANSWER:
JOIN combines rows from two or more tables based on a related column (column that is present in both tables) while SELF JOIN it joins a table with itself. It is useful for hierarchial data for comparing rows within the same table.

4) What is the difference between a PRIMARY KEY and a FOREIGN KEY?

ANSWER:
A PRIMARY KEY identifies each record in a table uniquely. A table can have only one primary key, and the primary key columns cannot have NULL values. On the other hand, A column or group of columns in a table that is used to establish a link between data in two tables. A foregin key in one table refers to the primary key of another table.

5) What are common techniques to handle large Datasets in SQL?

ANSWER:
Handling large datasets efficently is crucial in database management. there are some techniques that can be used to handle large datasets such as partitioning which is splitting large tables into smaller, and more manageable pieces, typically based on the ranges of data. Another technique that can be used is Data Archiving, which involves archiving old or less frequently accessed data to separate tables or databases. Another technique will be indexting, we use indexing to speed up a query performance on large datasets.

6) How do you optimize a query for better performance?

ANSWER:
A query optimization can improve the speed and efficiency of SQL Queries. some methods used to optimize query performance is by avoiding SELECT * by selecting only rhe columns you need you reduce the amount of data being processed. another method is using EXPLAIN function which analyzes the exuecution plan of a querie to identify performance bottlenecks.

7) What is a recursive query in SQL?

ANSWER:
A recursive query is used to query hierarchical data, such as organizational structures, folder structures, or bill-of-materials. Recursive queries are written using Common Table Expressions (CTEs) with the WITH clause.

8) Explain the EXPLAIN command in SQL?

ANSWER:
The EXPLAIN command is used to display the execution plan of a query. It provides insight into how the database optimizer is planning to execute a query, including how tables are joined, the order of operations, and whether indexes are used. It is a valuable tool for query optimization.

9) What is ACID in SQL?

ANSWER:
ACID stands for Atomicity, Consistency, Isolation, and Durability. These are properties that guarantee database transactions are processed reliably:

1- Atomicity: Ensures that a transaction is treated as a single unit of work, meaning either all operations within the transaction are completed successfully or none are.
2- Consistency: Ensures that the database transitions from one valid state to another, preserving data integrity.
3- Isolation: Ensures that concurrent transactions do not interfere with each other.
4- Durability: Ensures that once a transaction is committed, it remains permanent, even in the event of a system failure.
